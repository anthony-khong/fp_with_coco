# Original
from itertools import count, takewhile
def primes():
    def sieve(numbers):
        head = next(numbers)
        yield head
        yield from sieve(filter(x -> x % head, numbers))
    return sieve(count(2))
if __name__ == '__main__':
    print(list(takewhile(lambda x: x < 250, primes())))

# Nicer lambdas
from itertools import count, takewhile
def primes():
    def sieve(numbers):
        head = next(numbers)
        yield head
        yield from sieve(n for n in numbers if n % head)
    return sieve(count(2))
if __name__ == '__main__':
    print(list(takewhile(x -> x < 250, primes())))

# Forward Piping
from itertools import count, takewhile
def primes():
    def sieve(numbers):
        head = next(numbers)
        yield head
        yield from sieve(n for n in numbers if n % head)
    return sieve(count(2))
if __name__ == '__main__':
    primes() |> ps -> takewhile(x -> x < 250, ps) |> list |> print

# Currying
from itertools import count, takewhile
def primes():
    def sieve(numbers):
        head = next(numbers)
        yield head
        yield from sieve(n for n in numbers if n % head)
    return sieve(count(2))
if __name__ == '__main__':
    primes() |> takewhile$(x -> x < 250) |> list |> print

# Iterator Chaining
from itertools import count, takewhile
def primes():
    def sieve(numbers):
        head = next(numbers)
        return [head] :: sieve(n for n in numbers if n % head)
    return sieve(count(2))
if __name__ == '__main__':
    primes() |> takewhile$(x -> x < 250) |> list |> print

# Pattern-matching
from itertools import count, takewhile
def primes():
    def sieve([head] :: tail):
        return [head] :: sieve(n for n in tail if n % head)
    return sieve(count(2))
if __name__ == '__main__':
    primes() |> takewhile$(x -> x < 250) |> list |> print

# Function Assignments
from itertools import count, takewhile
def primes() =
    def sieve([x] :: xs) = [x] :: sieve(n for n in xs if n % x)
    sieve(count(2))
if __name__ == '__main__':
    primes() |> takewhile$(x -> x < 250) |> list |> print

# No more imports
def primes() =
    def sieve([x] :: xs) = [x] :: sieve(n for n in xs if n % x)
    sieve(count(2))
if __name__ == '__main__':
    primes() |> takewhile$(x -> x < 250) |> list |> print


# Bonuses
def sieve([x] :: xs) = [x] :: sieve(n for n in xs if n % x)

if __name__ == '__main__':
    count(2) |> sieve |> takewhile$(x -> x < 500) |> list |> print
