import pytest

from pipeline import (
        Estimator, Transformer,
        fit, transform, fit_transform, mappend, mconcat, parallel_mconcat,
        MatchError
        )

def test_fit():
    estimator = Estimator(x -> Transformer(y -> x + y))
    transformer = fit(estimator, 1)
    assert transformer.transform_fn(2) == 3, 'Fit function on Estimator is incorrect.'

    transformer = Transformer(x -> x + 1)
    fitted_transformer = fit(transformer, 2)
    assert fitted_transformer.transform_fn(3) == 4, 'Fit function on Transformer incorrect.'

def test_transform():
    with pytest.raises(MatchError):
        transform(Estimator(None), 1)

    transformer = Transformer(x -> x * x)
    assert transform(transformer, 5) == 5*5, 'Transform function on Transformer incorrect.'

def test_mappend():
    xformer0 = Transformer(x -> x + 1)
    xformer1 = Transformer(x -> x * x)
    assert mappend(xformer0, xformer1).transform_fn(5) == 36, (
            'Mappend function on (Transformer, Transformer) incorrect.'
            )
    assert mappend(xformer1, xformer0).transform_fn(5) == 26, (
            'Mappend function on (Transformer, Transformer) ignores order.'
            )

    estimator0 = Estimator(_ -> Transformer(x -> x + 1))
    assert fit_transform(mappend(estimator0, xformer0), 1) == 3, (
            'Mappend function on (Estimator, Transformer) incorrect.'
            )
    assert fit_transform(mappend(xformer1, estimator0), 2) == 5, (
            'Mappend function on (Transformer, Estimator) incorrect.'
            )

    estimator1 = Estimator(_ -> Transformer(x -> x*x*x))
    assert fit_transform(mappend(estimator0, estimator1), 1) == 8, (
            'Mappend function on (Estimator, Estimator) incorrect.'
            )

def test_mconcat():
    stages = [
            Transformer(x -> x + 1),
            Estimator(x -> Transformer(y -> x + y)),
            Transformer(x -> x*x),
            Estimator(x -> Transformer(y -> x * y))
            ]
    assert transform(fit(mconcat(stages), 2), 3) == 72, (
            'Mconcat does not order the stages correctly.'
            )

# These are required because parallel_mconcat cannot handle unpicklable objects
def square(x) = x * x
def add_transform(x) = Transformer((+)$(x))
def multiply_transform(x) = Transformer((*)$(x))
def test_parallel_mconcat():
    stages = [
            Transformer((+)$(1)),
            Estimator(add_transform),
            Transformer(square),
            Estimator(multiply_transform)
            ]
    x = transform(fit(parallel_mconcat(stages), 2), 3)
    assert transform(fit(parallel_mconcat(stages), 2), 3) == 72, (
            'Mconcat does not order the stages correctly.'
            )
