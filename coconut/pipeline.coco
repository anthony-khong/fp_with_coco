'''
Pipeline Type Tetris
--------------------

Estimator = DataFrame -> Transformer
Transformer = DataFrame -> DataFrame
PipelineStage = Estimator | Transformer

fit :: PipelineStage -> DataFrame -> Transformer
transform :: Transformer -> DataFrame -> DataFrame
fit_transform :: PipelineStage -> DataFrame -> DataFrame
pipeline :: [PipelineStage] -> PipelineStage
'''

data Estimator(fit_fn)
data Transformer(transform_fn)

def fit(Estimator(fit_fn), df) = fit_fn(copy(df))

@addpattern(fit)
def fit(Transformer(transform_fn), _) = Transformer(transform_fn)

def transform(Transformer(transform_fn), df) = transform_fn(copy(df))

def fit_transform(stage, df) = transform(fit(stage, df), df)

def mappend(Transformer(fn0), Transformer(fn1)) = Transformer(fn1..fn0)

@addpattern(mappend)
def mappend(stage0, stage1) = Estimator(df -> mappend(fit(stage0, df), fit(stage1, df)))

def mconcat(stages) = reduce(mappend, stages)
pipeline = mconcat

def copy(x) = x.copy() if hasattr(x, 'copy') else x

def parallel_mconcat(stages) = Estimator(df -> mconcat(parallel_map(fit$(?, df), stages)))
parallel_pipeline = parallel_mconcat

def generic_estimator(fit_fn, transform_fn, *args, **kwargs):
    return Estimator(Transformer..transform_fn$..fit_fn$(*args, **kwargs))
