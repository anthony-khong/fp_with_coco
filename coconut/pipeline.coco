'''
Pipeline Type Tetris
--------------------

Estimator = DataFrame -> Transformer
Transformer = DataFrame -> DataFrame
PipelineStage = Estimator | Transformer

fit :: PipelineStage -> DataFrame -> Transformer
transform :: Transformer -> DataFrame -> DataFrame
fit_transform :: PipelineStage -> DataFrame -> DataFrame
pipeline :: [PipelineStage] -> PipelineStage
'''

data Estimator(fit_fn)
data Transformer(xform_fn)

def transform(Transformer(xform_fn), df) = xform_fn(copy(df))

def fit(Estimator(fit_fn), df) = fit_fn(copy(df))

@addpattern(fit)
def fit(Transformer(xform_fn), _) = Transformer(xform_fn)

def fit_transform(stage, df) = transform(fit(stage, df), df)

def mempty() = Transformer(df -> df)

def mappend(Transformer(fn0), Transformer(fn1)) = Transformer(fn1..fn0)

@addpattern(mappend)
def mappend(stage0, stage1) =
    def fit_fn(df) =
        xformer0 = fit(stage0, df)
        xformer1 = fit(stage1, transform(xformer0, df))
        mappend(xformer0, xformer1)
    Estimator(fit_fn)

def mconcat(stages) = reduce(mappend, stages)
pipeline = mconcat

def copy(x) = x.copy() if hasattr(x, 'copy') else x

def parallel_mconcat(stages) = Estimator(df -> mconcat(parallel_map(fit$(?, df), stages)))
parallel_pipeline = parallel_mconcat
